for(i in 2:noS){
lines(S[i,],col=cl[i])
}
}
}
#
# n0=length(tesla_filter$actual_close)
# histdata<-matrix(rep(tesla_filter,N),ncol=n0,byrow=T)
# #wholedata<-cbind(histdata,tesla_egbm)
# visualize(wholedata)
visualize(tesla_egbm)
dim(tesla_egbm)
mean(tesla_egbm[,253])
sd(tesla_egbm[,253])
quantile(tesla_egbm[,253], .05)
quantile(tesla_egbm[,253], .95)
visualize(tesla_sbt)
dim(tesla_sbt)
mean(tesla_sbt[,253])
sd(tesla_sbt[,253])
quantile(tesla_sbt[,253], .05)
quantile(tesla_sbt[,253], .95)
visualize(tesla_esbt)
dim(tesla_esbt)
mean(tesla_esbt[,253])
sd(tesla_esbt[,253])
quantile(tesla_esbt[,253], .05)
quantile(tesla_esbt[,253], .95)
####### Antithetic variates
SimGBMexactAV<-function(N,S0,v,sigma,Deltat,T,collate=FALSE){
m=T/Deltat # number of periods
S=matrix(S0,nrow=N,ncol=m+1)
Stilde=matrix(S0,nrow=N,ncol=m+1)
for(i in 1:N){
Z<-rnorm(m)
for(j in 2:(m+1)){
S[i,j]=S[i,j-1]*exp(v*Deltat+sigma*sqrt(Deltat)*Z[j-1])
Stilde[i,j]=Stilde[i,j-1]*exp(v*Deltat+sigma*sqrt(Deltat)*(-Z[j-1]))
}
}
if(collate){
out=matrix(0,2*N,ncol=m+1)
for(i in 1:N){
out[(2*i-1),]=S[i,]
out[2*i,]=Stilde[i,]
}
return(out)
} else{return(rbind(S,Stilde))}
}
tesla_eav<-SimGBMexactAV(N,S0,v,sigma,dt,1,collate=TRUE)
visualize(tesla_eav)
print_stats = function(mtx){
m=mean(mtx[,253])
s=sd(mtx[,253])
q5=quantile(mtx[,253], .05)
q95=quantile(mtx[,253], .95)
return(c(m,s,q5,q95))
}
print_stats(tesla_eav)
par(mfrow=c(1,1))
# Define the first estimation window
trainind <-(1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") <= "2022-01-12"] ### All data before 2022
trainind <-(1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") > "2021-01-12"]
testind <- (1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") > "2022-01-12"]
ntrain=length(trainind) ## 1061 days of data roughly a 4 year
end = trainind[length(trainind)]
dt=1/ntrain # since we use one-year estimation window
start=trainind[1]
alpha=0.01
VaR=rep(0,start-1)
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
combinedVaR=c(VaR,rep(NA,ntrain))
plot(rev(tesla_lr), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
library(dplyr)
library(fGarch)
# Define the first estimation window
trainind <-(1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") <= "2022-01-12"] ### All data before 2022
trainind <-(1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") > "2021-01-12"]
testind <- (1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") > "2022-01-12"]
ntrain=length(trainind) ## 1061 days of data roughly a 4 year
end = trainind[length(trainind)]
dt=1/ntrain # since we use one-year estimation window
start=trainind[1]
alpha=0.01
VaR=rep(0,start-1)
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
combinedVaR=c(VaR,rep(NA,ntrain))
plot(rev(tesla_lr), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
# Define the first estimation window
trainind <-(1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") <= "2022-01-12"] ### All data before 2022
trainind <-(1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") > "2021-01-12"]
testind <- (1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") > "2022-01-12"]
ntrain=length(trainind) ## 1061 days of data roughly a 4 year
end = trainind[length(trainind)]
dt=1/ntrain
start=trainind[1]
alpha=0.01
VaR=rep(0,start-1)
start
trainind
length(tesla_filter)
n
tesla
tesla_filter
tesla_var <- subset(tesla, select = c('Date', 'Adj.Close'))
tesla_var$Date <- as.Date(tesla_var$Date)
tesla_var$year <- format(tesla_var$Date, format = "%Y")
tesla_var$actual_close = tesla_var$Adj.Close * 3
n = length(tesla_var$actual_close) -1
tesla_lr <-  log(tesla_filter$actual_close[2:n+1]) - log(tesla_filter$actual_close[1:n])
# Define the first estimation window
trainind <-(1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") <= "2022-01-12"] ### All data before 2022
trainind <-(1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") > "2021-01-12"]
trainind
# Define the first estimation window
trainind <-(1:n)[as.Date(tesla_var[1:n,1],"%b %d, %Y") <= "2022-01-12" &
as.Date(tesla_var[1:n,1],"%b %d, %Y") > "2021-01-12"]
trainind
testind <- (1:n)[as.Date(tesla_filter[1:n,1],"%b %d, %Y") > "2022-01-12"]
ntrain=length(trainind) ## 1061 days of data roughly a 4 year
end = trainind[length(trainind)]
dt=1/ntrain # since we use one-year estimation window
start=trainind[1]
alpha=0.01
VaR=rep(0,start-1)
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
tesind
testind
testind <- (1:n)[as.Date(tesla_var[1:n,1],"%b %d, %Y") > "2022-01-12"]
ntrain=length(trainind) ## 1061 days of data roughly a 4 year
end = trainind[length(trainind)]
dt=1/ntrain # since we use one-year estimation window
start=trainind[1]
alpha=0.01
VaR=rep(0,start-1)
testind
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
print(v,sigma,nu)
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
length(testind)
tesla_lr[trainind]
trainind
tesla_lr
n = length(tesla_var$actual_close) -1
tesla_lr <- log(tesla_var$actual_close[2:n+1]) - log(tesla_var$actual_close[1:n])
# Define the first estimation window
trainind <-(1:n)[as.Date(tesla_var[1:n,1],"%b %d, %Y") <= "2022-01-12" &
as.Date(tesla_var[1:n,1],"%b %d, %Y") > "2021-01-12"] ### All data before 2022
testind <- (1:n)[as.Date(tesla_var[1:n,1],"%b %d, %Y") > "2022-01-12"]
ntrain=length(trainind) ## 1061 days of data roughly a 4 year
end = trainind[length(trainind)]
dt=1/ntrain # since we use one-year estimation window
start=trainind[1]
alpha=0.01
VaR=rep(0,start-1)
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
print(v,sigma,nu)
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
combinedVaR=c(VaR,rep(NA,ntrain))
plot(rev(tesla_lr), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
VaR
start=trainind[1]
alpha=0.01
VaR=rep(0,testind-1)
VaR=rep(0,length(testind)-1)
VaR
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
combinedVaR=c(VaR,rep(NA,ntrain))
plot(rev(tesla_lr), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
testind
length(testind)
start=trainind[1]
alpha=0.01
VaR=rep(0,length(testind)-1)
Var
VaR
length(VaR)
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
VaR=rep(0,length(testind))
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
VaR=rep(0,length(testind))
VaR
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
VaR=rep(0,length(testind)-1)
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
VaR=rep(0,length(testind)-1)
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
tesla_var <- subset(tesla, select = c('Date', 'Adj.Close'))
tesla_var$Date <- as.Date(tesla_var$Date)
tesla_var$year <- format(tesla_var$Date, format = "%Y")
tesla_var$actual_close = tesla_var$Adj.Close * 3
n = length(tesla_var$actual_close) -1
tesla_lr <- log(tesla_var$actual_close[2:n+1]) - log(tesla_var$actual_close[1:n])
# Define the first estimation window
trainind <-(1:n)[as.Date(tesla_var[1:n,1],"%b %d, %Y") <= "2022-01-12" &
as.Date(tesla_var[1:n,1],"%b %d, %Y") > "2021-01-12"] ### All data before 2022
testind <- (1:n)[as.Date(tesla_var[1:n,1],"%b %d, %Y") > "2022-01-12"]
ntrain=length(trainind) ## 1061 days of data roughly a 4 year
end = trainind[length(trainind)]
dt=1/ntrain # since we use one-year estimation window
start=trainind[1]
alpha=0.01
VaR=rep(0,length(testind)-1)
library(dplyr)
library(fGarch)
tesla_var <- subset(tesla, select = c('Date', 'Adj.Close'))
tesla_var$Date <- as.Date(tesla_var$Date)
tesla_var$year <- format(tesla_var$Date, format = "%Y")
tesla_var$actual_close = tesla_var$Adj.Close * 3
n = length(tesla_var$actual_close) -1
tesla_lr <- log(tesla_var$actual_close[2:n+1]) - log(tesla_var$actual_close[1:n])
tesla = read.csv("TSLA.csv")
tesla_var <- subset(tesla, select = c('Date', 'Adj.Close'))
tesla_var$Date <- as.Date(tesla_var$Date)
tesla_var$year <- format(tesla_var$Date, format = "%Y")
tesla_var$actual_close = tesla_var$Adj.Close * 3
n = length(tesla_var$actual_close) -1
tesla_lr <- log(tesla_var$actual_close[2:n+1]) - log(tesla_var$actual_close[1:n])
# Define the first estimation window
trainind <-(1:n)[as.Date(tesla_var[1:n,1],"%b %d, %Y") <= "2022-01-12" &
as.Date(tesla_var[1:n,1],"%b %d, %Y") > "2021-01-12"]
testind <- (1:n)[as.Date(tesla_var[1:n,1],"%b %d, %Y") > "2022-01-12"]
ntrain=length(trainind) ## 1061 days of data roughly a 4 year
end = trainind[length(trainind)]
dt=1/ntrain # since we use one-year estimation window
trainind
testind
start=trainind[1]
alpha=0.01
VaR=rep(0,length(testind)-1)
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(N,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
count = 1
for(i in 1:length(testind)){
tesla_train_lr <-tesla_lr[trainind]
teslastdFit<-stdFit(tesla_train_lr)$par
v= teslastdFit["mean"]/dt; sigma=teslastdFit["sd"]/sqrt(dt); nu=teslastdFit["nu"]
Z=rt(10000,df=nu)
R=v*dt+sigma*sqrt(dt)*Z
VaR[i]=-quantile(R,probs=alpha)
trainind = seq(trainind[1]+1, testind[count])
print(head(trainind))
print(tail(trainind))
print(length(trainind))
count= count + 1
}
combinedVaR=c(VaR,rep(NA,ntrain))
plot(rev(tesla_lr), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
combinedVaR
combinedVaR=c(rep(NA,ntrain),VaR)
plot(rev(tesla_lr), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
combinedVaR=c(rep(NA,ntrain),VaR)
plot(rev(tesla_lr), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
combinedVaR=c(VaR, rep(NA,ntrain))
plot(tesla_lr, type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
combinedVaR=c(VaR, rep(NA,ntrain))
plot(tesla_lr, type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
combinedVaR=c(rep(NA,ntrain),VaR)
plot(tesla_lr, type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-rev(combinedVaR), col=2)
combinedVaR=c(rep(NA,ntrain),VaR)
plot(tesla_lr, type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(combinedVaR, col=2)
combinedVaR=c(rep(NA,ntrain),VaR)
plot(tesla_lr, type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-combinedVaR, col=2)
length(testind)
length(tesla_lr)
length(tesla_lr)-length(testind)
combinedVaR=c(rep(NA,1070),VaR)
plot(tesla_lr, type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-combinedVaR, col=2)
tesla_lr
tail(tesla_lr)
length(testind)
length(trainind)
253+188
combinedVaR=c(rep(NA,1070),VaR)
plot(tail(tesla_lr,441), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-combinedVaR, col=2)
combinedVaR=c(rep(NA,1070),VaR)
plot(tail(tesla_lr,441), type="l", ylim=c(-max(VaR),max(tesla_lr)))
lines(-combinedVaR, col=2)
combinedVaR=c(rep(NA,1070),VaR)
plot(tail(tesla_lr,441), type="l", ylim=c(-max(VaR),max(tail(tesla_lr,441))))
lines(-combinedVaR, col=2)
combinedVaR=c(rep(NA,441),VaR)
plot(tail(tesla_lr,441), type="l", ylim=c(-max(VaR),max(tail(tesla_lr,441))))
lines(-combinedVaR, col=2)
combinedVaR=c(rep(NA,253),VaR)
plot(tail(tesla_lr,441), type="l", ylim=c(-max(VaR),max(tail(tesla_lr,441))))
lines(-combinedVaR, col=2)
